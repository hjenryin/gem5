Spin Implementation by Hongyi Jin (2021011818) and Yunzhe Zhang (202101085)

Original paper of SPIN: A. Ramrakhyani, P. V. Gratz and T. Krishna, "Synchronized Progress in Interconnection Networks (SPIN): A New Theory for Deadlock Freedom," 2018 ACM/IEEE 45th Annual International Symposium on Computer Architecture (ISCA), Los Angeles, CA, USA, 2018, pp. 699-711, doi: 10.1109/ISCA.2018.00064.

The original website of gem5: http://www.gem5.org.

# How to run

You can compile with `scons build/NULL/gem5.fast -j $(nproc)`.

An example to run the code is

```
../gem5/build/NULL/gem5.fast ../gem5/configs/example/garnet_synth_traffic.py --network=garnet --num-cpus=16 --num-dirs=16 --topology=Ring --inj-vnet=0 --sim-cycles=10000 --injectionrate=0.1 --synthetic=uniform_random --routing-algorithm 1 --vcs-per-vnet=1 --spin-enabled
```

We allow topology to be Ring, Mesh_XY, Mesh_westfirst, Torus2D, and Torus3D. For the routing algorithm, 0 is for Mesh_westfirst, and 1 is for the others. We only allow uniform_random, neighbor, and tornado traffic. To enable spin, pass in `--spin-enabled` as an argument.

To rurun our experiments, you can use `run.py` and `deadlock.py` in the `Test-lab4` folder. Note that this is written for `gem5.fast`, and if you want to use `.opt` instead, you need to change it correspondingly. This may be time-consuming, even though we're using multi-processing. If you wish not to rerun all the results, you can remove some items from the configuration lists at the beginning of these files to test .

# Code structure

Most functional modifications can be found in `garnet/Spin`:

garnet/Spin/CommonTypes.hh: defines state and message type enums
garnet/Spin/SpinMessage.cc[.hh]: class for special spin messages, which inherits the flit class
garnet/Spin/FSM.cc[.hh]: execute state transitions and reset counters according to received signals: incoming messages, counter timeouts, flit arrival/leaving, and after move completes.
garnet/Spin/ProbeManager.cc[.hh]: checks eligibility for probe forwarding and sends move message
garnet/Spin/MoveManager.cc[.hh]: processes move, kill move, and probe move, and manages their forwarding.
garnet/Spin/LoopBuffer.cc[.hh]: class for the loop buffer that records the path in a probe message and guides forwarding of move/probe move/kill move. Also latched in the router that started a move message.

Also, we made some modifications to NetworkLink, InputUnit, Router, and some other files so as to properly send and receive spin messages.

## A Brief Walkthrough

SpinFSM will be waked up after the InputUnit, which registers the received spin messages into the SpinFSM. Then it will process the message, change its internal state correspondingly, schedule proper timeout, and ask the ProbeManager / MoveManager to send messages to downstream routers or schedule a move. After that, the SpinFSM will check timeout and act correspondingly.
