From 3d4a00f3b4c1184b544bd1bbc4d54175528a64ba Mon Sep 17 00:00:00 2001
From: hjenryin <72179072+hjenryin@users.noreply.github.com>
Date: Sun, 20 Aug 2023 19:26:01 +0800
Subject: [PATCH 2/2] mem-garnet: Lab3

Change-Id: Ie0e010841f7ae2ec589ffdafef284f40e4589563
---
 configs/network/Network.py                    |  8 +++
 configs/topologies/Mesh_XY.py                 |  4 +-
 .../GarnetSyntheticTraffic.cc                 |  9 ++--
 src/mem/ruby/SConscript                       |  1 +
 src/mem/ruby/network/garnet/CommonTypes.hh    |  2 +-
 src/mem/ruby/network/garnet/GarnetNetwork.py  |  1 +
 src/mem/ruby/network/garnet/InputUnit.cc      | 11 ++--
 src/mem/ruby/network/garnet/InputUnit.hh      |  6 ++-
 .../ruby/network/garnet/NetworkInterface.cc   |  8 ++-
 src/mem/ruby/network/garnet/OutVcState.cc     |  2 +-
 src/mem/ruby/network/garnet/OutVcState.hh     | 22 ++++----
 src/mem/ruby/network/garnet/OutputUnit.cc     | 10 ++--
 src/mem/ruby/network/garnet/OutputUnit.hh     | 12 +----
 src/mem/ruby/network/garnet/Router.cc         | 11 ++--
 src/mem/ruby/network/garnet/Router.hh         |  2 +
 .../ruby/network/garnet/SwitchAllocator.cc    | 20 +++----
 src/mem/ruby/network/garnet/VirtualChannel.cc | 27 +++-------
 src/mem/ruby/network/garnet/VirtualChannel.hh | 52 +++++++++++--------
 src/mem/ruby/network/garnet/flitBuffer.hh     |  1 +
 19 files changed, 110 insertions(+), 99 deletions(-)

diff --git a/configs/network/Network.py b/configs/network/Network.py
index e4ccd86962..24c322eb68 100644
--- a/configs/network/Network.py
+++ b/configs/network/Network.py
@@ -119,6 +119,13 @@ def define_options(parser):
         help="""SimpleNetwork links uses a separate physical
             channel for each virtual network""",
     )
+    parser.add_argument(
+        "--wormhole",
+        action="store",
+        type=int,
+        default=0,
+        help="0: disable, otherwise: the depth of each VC",
+    )


 def create_network(options, ruby):
@@ -157,6 +164,7 @@ def create_network(options, ruby):
         ext_links=[],
         int_links=[],
         netifs=[],
+        buffers_per_ctrl_vc=options.wormhole if options.wormhole != 0 else 1,
     )

     return (network, IntLinkClass, ExtLinkClass, RouterClass, InterfaceClass)
diff --git a/configs/topologies/Mesh_XY.py b/configs/topologies/Mesh_XY.py
index 94cb770750..8011dc188a 100644
--- a/configs/topologies/Mesh_XY.py
+++ b/configs/topologies/Mesh_XY.py
@@ -67,7 +67,9 @@ class Mesh_XY(SimpleTopology):

         # Create the routers in the mesh
         routers = [
-            Router(router_id=i, latency=router_latency)
+            Router(
+                router_id=i, latency=router_latency, wormhole=options.wormhole
+            )
             for i in range(num_routers)
         ]
         network.routers = routers
diff --git a/src/cpu/testers/garnet_synthetic_traffic/GarnetSyntheticTraffic.cc b/src/cpu/testers/garnet_synthetic_traffic/GarnetSyntheticTraffic.cc
index 6727e3e5a1..51422efc68 100644
--- a/src/cpu/testers/garnet_synthetic_traffic/GarnetSyntheticTraffic.cc
+++ b/src/cpu/testers/garnet_synthetic_traffic/GarnetSyntheticTraffic.cc
@@ -246,9 +246,12 @@ GarnetSyntheticTraffic::generatePkt()
             dest_y = src_x;
             destination = dest_y*radix + dest_x;
     } else if (traffic == TORNADO_) {
-        dest_x = (src_x + (int) ceil(radix/2) - 1) % radix;
-        dest_y = src_y;
-        destination = dest_y*radix + dest_x;
+            int bias = (int)ceil(radix / 2) - 1;
+            if (topology == RING_TOPOLOGY_)
+            bias += 1;
+            dest_x = (src_x + bias) % radix;
+            dest_y = src_y;
+            destination = dest_y * radix + dest_x;
     }
     else {
         fatal("Unknown Traffic Type: %s!\n", traffic);
diff --git a/src/mem/ruby/SConscript b/src/mem/ruby/SConscript
index 1e386f922d..883ac0d8d4 100644
--- a/src/mem/ruby/SConscript
+++ b/src/mem/ruby/SConscript
@@ -69,6 +69,7 @@ DebugFlag('RubyStats')
 DebugFlag('RubyResourceStalls')
 DebugFlag('RubyProtocol')
 DebugFlag('RubyHitMiss')
+DebugFlag('Lab3')

 CompoundFlag('Ruby', [ 'RubyQueue', 'RubyNetwork', 'RubyTester',
     'RubyGenerated', 'RubySlicc', 'RubySystem', 'RubyCache',
diff --git a/src/mem/ruby/network/garnet/CommonTypes.hh b/src/mem/ruby/network/garnet/CommonTypes.hh
index 0799aec350..84c7daa1f2 100644
--- a/src/mem/ruby/network/garnet/CommonTypes.hh
+++ b/src/mem/ruby/network/garnet/CommonTypes.hh
@@ -46,7 +46,7 @@ namespace garnet

 enum flit_type {HEAD_, BODY_, TAIL_, HEAD_TAIL_,
                 CREDIT_, NUM_FLIT_TYPE_};
-enum VC_state_type {IDLE_, VC_AB_, ACTIVE_, NUM_VC_STATE_TYPE_};
+typedef int VC_flit_num;
 enum VNET_type {CTRL_VNET_, DATA_VNET_, NULL_VNET_, NUM_VNET_TYPE_};
 enum flit_stage {I_, VA_, SA_, ST_, LT_, NUM_FLIT_STAGE_};
 enum link_type { EXT_IN_, EXT_OUT_, INT_, NUM_LINK_TYPES_ };
diff --git a/src/mem/ruby/network/garnet/GarnetNetwork.py b/src/mem/ruby/network/garnet/GarnetNetwork.py
index b46fe9f076..90201736b7 100644
--- a/src/mem/ruby/network/garnet/GarnetNetwork.py
+++ b/src/mem/ruby/network/garnet/GarnetNetwork.py
@@ -85,3 +85,4 @@ class GarnetRouter(BasicRouter):
     width = Param.UInt32(
         Parent.ni_flit_size, "bit width supported by the router"
     )
+    wormhole = Param.UInt32(0, "0: disable, otherwise: the depth of each VC")
diff --git a/src/mem/ruby/network/garnet/InputUnit.cc b/src/mem/ruby/network/garnet/InputUnit.cc
index 179bb642b7..af29705c34 100644
--- a/src/mem/ruby/network/garnet/InputUnit.cc
+++ b/src/mem/ruby/network/garnet/InputUnit.cc
@@ -31,6 +31,7 @@

 #include "mem/ruby/network/garnet/InputUnit.hh"

+#include "debug/Lab3.hh"
 #include "debug/RubyNetwork.hh"
 #include "mem/ruby/network/garnet/Credit.hh"
 #include "mem/ruby/network/garnet/Router.hh"
@@ -58,8 +59,10 @@ InputUnit::InputUnit(int id, PortDirection direction, Router *router)

     // Instantiating the virtual channels
     virtualChannels.reserve(m_num_vcs);
-    for (int i=0; i < m_num_vcs; i++) {
-        virtualChannels.emplace_back();
+    int wormhole = router->get_wormhole();
+    int vc_max_depth = (wormhole == 0 ? 1 : wormhole);
+    for (int i = 0; i < m_num_vcs; i++) {
+        virtualChannels.emplace_back(vc_max_depth);
     }
 }

@@ -90,7 +93,7 @@ InputUnit::wakeup()
         if ((t_flit->get_type() == HEAD_) ||
             (t_flit->get_type() == HEAD_TAIL_)) {

-            assert(virtualChannels[vc].get_state() == IDLE_);
+            assert(!virtualChannels[vc].isFull());
             set_vc_active(vc, curTick());

             // Route computation for this vc
@@ -103,7 +106,7 @@ InputUnit::wakeup()
             grant_outport(vc, outport);

         } else {
-            assert(virtualChannels[vc].get_state() == ACTIVE_);
+            assert(virtualChannels[vc].get_state_size() > 0);
         }


diff --git a/src/mem/ruby/network/garnet/InputUnit.hh b/src/mem/ruby/network/garnet/InputUnit.hh
index 4c4baeb03e..07be53f214 100644
--- a/src/mem/ruby/network/garnet/InputUnit.hh
+++ b/src/mem/ruby/network/garnet/InputUnit.hh
@@ -66,13 +66,13 @@ class InputUnit : public Consumer
     inline void
     set_vc_idle(int vc, Tick curTime)
     {
-        virtualChannels[vc].set_idle(curTime);
+        virtualChannels[vc].dec_vc_flit_num(curTime);
     }

     inline void
     set_vc_active(int vc, Tick curTime)
     {
-        virtualChannels[vc].set_active(curTime);
+        virtualChannels[vc].add_vc_flit_num(curTime);
     }

     inline void
@@ -125,6 +125,8 @@ class InputUnit : public Consumer
         return virtualChannels[vc].need_stage(stage, time);
     }

+    inline bool isFull(int invc) { return virtualChannels[invc].isFull(); }
+
     inline bool
     isReady(int invc, Tick curTime)
     {
diff --git a/src/mem/ruby/network/garnet/NetworkInterface.cc b/src/mem/ruby/network/garnet/NetworkInterface.cc
index 31d625c4d5..75788a5528 100644
--- a/src/mem/ruby/network/garnet/NetworkInterface.cc
+++ b/src/mem/ruby/network/garnet/NetworkInterface.cc
@@ -288,8 +288,7 @@ NetworkInterface::wakeup()
             Credit *t_credit = (Credit*) inCreditLink->consumeLink();
             outVcState[t_credit->get_vc()].increment_credit();
             if (t_credit->is_free_signal()) {
-                outVcState[t_credit->get_vc()].setState(IDLE_,
-                    curTick());
+                outVcState[t_credit->get_vc()].vc_dec_flit(curTick());
             }
             delete t_credit;
         }
@@ -450,7 +449,7 @@ NetworkInterface::flitisizeMessage(MsgPtr msg_ptr, int vnet)
         }

         m_ni_out_vcs_enqueue_time[vc] = curTick();
-        outVcState[vc].setState(ACTIVE_, curTick());
+        outVcState[vc].vc_add_flit(curTick());
     }
     return true ;
 }
@@ -465,8 +464,7 @@ NetworkInterface::calculateVC(int vnet)
         if (m_vc_allocator[vnet] == m_vc_per_vnet)
             m_vc_allocator[vnet] = 0;

-        if (outVcState[(vnet*m_vc_per_vnet) + delta].isInState(
-                    IDLE_, curTick())) {
+        if (!outVcState[(vnet * m_vc_per_vnet) + delta].isFull(curTick())) {
             vc_busy_counter[vnet] = 0;
             return ((vnet*m_vc_per_vnet) + delta);
         }
diff --git a/src/mem/ruby/network/garnet/OutVcState.cc b/src/mem/ruby/network/garnet/OutVcState.cc
index 9068a22b1f..9d4fbf262d 100644
--- a/src/mem/ruby/network/garnet/OutVcState.cc
+++ b/src/mem/ruby/network/garnet/OutVcState.cc
@@ -46,7 +46,7 @@ OutVcState::OutVcState(int id, GarnetNetwork *network_ptr,
     : m_time(0)
 {
     m_id = id;
-    m_vc_state = IDLE_;
+    vc_flit_num = 0;
     /*
      * We find the virtual network using the number of
      * vcs per vnet. This assumes that the same vcs per
diff --git a/src/mem/ruby/network/garnet/OutVcState.hh b/src/mem/ruby/network/garnet/OutVcState.hh
index 42ef9e9342..39235f5206 100644
--- a/src/mem/ruby/network/garnet/OutVcState.hh
+++ b/src/mem/ruby/network/garnet/OutVcState.hh
@@ -53,22 +53,26 @@ class OutVcState
     void increment_credit();
     void decrement_credit();

-    inline bool
-    isInState(VC_state_type state, Tick request_time)
-    {
-        return ((m_vc_state == state) && (request_time >= m_time) );
+    inline bool isInState(VC_flit_num state, Tick request_time) {
+        return ((vc_flit_num == state) && (request_time >= m_time));
     }
-    inline void
-    setState(VC_state_type state, Tick time)
-    {
-        m_vc_state = state;
+    inline void vc_add_flit(Tick time) {
+        vc_flit_num += 1;
         m_time = time;
     }
+    inline void vc_dec_flit(Tick time) {
+        vc_flit_num -= 1;
+        m_time = time;
+    }
+    inline bool isFull(Tick time) {
+        return ((time >= m_time) && (vc_flit_num == m_max_credit_count));
+    }
+    inline bool isEmpty(Tick time) { return (vc_flit_num == 0); }

   private:
     int m_id ;
     Tick m_time;
-    VC_state_type m_vc_state;
+    VC_flit_num vc_flit_num;
     int m_credit_count;
     int m_max_credit_count;
 };
diff --git a/src/mem/ruby/network/garnet/OutputUnit.cc b/src/mem/ruby/network/garnet/OutputUnit.cc
index d5ad75327c..60f9ff176c 100644
--- a/src/mem/ruby/network/garnet/OutputUnit.cc
+++ b/src/mem/ruby/network/garnet/OutputUnit.cc
@@ -88,7 +88,7 @@ OutputUnit::increment_credit(int out_vc)
 bool
 OutputUnit::has_credit(int out_vc)
 {
-    assert(outVcState[out_vc].isInState(ACTIVE_, curTick()));
+    assert(!outVcState[out_vc].isEmpty(curTick()));
     return outVcState[out_vc].has_credit();
 }

@@ -99,7 +99,7 @@ OutputUnit::has_free_vc(int vnet)
 {
     int vc_base = vnet*m_vc_per_vnet;
     for (int vc = vc_base; vc < vc_base + m_vc_per_vnet; vc++) {
-        if (is_vc_idle(vc, curTick()))
+        if (is_vc_avail(vc, curTick()))
             return true;
     }

@@ -112,8 +112,8 @@ OutputUnit::select_free_vc(int vnet)
 {
     int vc_base = vnet*m_vc_per_vnet;
     for (int vc = vc_base; vc < vc_base + m_vc_per_vnet; vc++) {
-        if (is_vc_idle(vc, curTick())) {
-            outVcState[vc].setState(ACTIVE_, curTick());
+        if (is_vc_avail(vc, curTick())) {
+            outVcState[vc].vc_add_flit(curTick());
             return vc;
         }
     }
@@ -137,7 +137,7 @@ OutputUnit::wakeup()
         increment_credit(t_credit->get_vc());

         if (t_credit->is_free_signal())
-            set_vc_state(IDLE_, t_credit->get_vc(), curTick());
+            outVcState[t_credit->get_vc()].vc_dec_flit(curTick());

         delete t_credit;

diff --git a/src/mem/ruby/network/garnet/OutputUnit.hh b/src/mem/ruby/network/garnet/OutputUnit.hh
index b07035c43a..b007bb0e21 100644
--- a/src/mem/ruby/network/garnet/OutputUnit.hh
+++ b/src/mem/ruby/network/garnet/OutputUnit.hh
@@ -84,16 +84,8 @@ class OutputUnit : public Consumer
         return m_out_link->get_id();
     }

-    inline void
-    set_vc_state(VC_state_type state, int vc, Tick curTime)
-    {
-      outVcState[vc].setState(state, curTime);
-    }
-
-    inline bool
-    is_vc_idle(int vc, Tick curTime)
-    {
-        return (outVcState[vc].isInState(IDLE_, curTime));
+    inline bool is_vc_avail(int vc, Tick curTime) {
+        return !outVcState[vc].isFull(curTime);
     }

     void insert_flit(flit *t_flit);
diff --git a/src/mem/ruby/network/garnet/Router.cc b/src/mem/ruby/network/garnet/Router.cc
index 5232b91897..5092772f16 100644
--- a/src/mem/ruby/network/garnet/Router.cc
+++ b/src/mem/ruby/network/garnet/Router.cc
@@ -49,12 +49,11 @@ namespace garnet
 {

 Router::Router(const Params &p)
-  : BasicRouter(p), Consumer(this), m_latency(p.latency),
-    m_virtual_networks(p.virt_nets), m_vc_per_vnet(p.vcs_per_vnet),
-    m_num_vcs(m_virtual_networks * m_vc_per_vnet), m_bit_width(p.width),
-    m_network_ptr(nullptr), routingUnit(this), switchAllocator(this),
-    crossbarSwitch(this)
-{
+    : BasicRouter(p), Consumer(this), m_latency(p.latency),
+      m_virtual_networks(p.virt_nets), m_vc_per_vnet(p.vcs_per_vnet),
+      m_num_vcs(m_virtual_networks * m_vc_per_vnet), m_bit_width(p.width),
+      m_network_ptr(nullptr), routingUnit(this), switchAllocator(this),
+      crossbarSwitch(this), wormhole(p.wormhole) {
     m_input_unit.clear();
     m_output_unit.clear();
 }
diff --git a/src/mem/ruby/network/garnet/Router.hh b/src/mem/ruby/network/garnet/Router.hh
index dbcdda9dbf..5fba1ee805 100644
--- a/src/mem/ruby/network/garnet/Router.hh
+++ b/src/mem/ruby/network/garnet/Router.hh
@@ -89,6 +89,7 @@ class Router : public BasicRouter, public Consumer
     int get_num_inports()   { return m_input_unit.size(); }
     int get_num_outports()  { return m_output_unit.size(); }
     int get_id()            { return m_id; }
+    int get_wormhole() { return wormhole; }

     void init_net_ptr(GarnetNetwork* net_ptr)
     {
@@ -147,6 +148,7 @@ class Router : public BasicRouter, public Consumer
     uint32_t m_virtual_networks, m_vc_per_vnet, m_num_vcs;
     uint32_t m_bit_width;
     GarnetNetwork *m_network_ptr;
+    uint32_t wormhole;

     RoutingUnit routingUnit;
     SwitchAllocator switchAllocator;
diff --git a/src/mem/ruby/network/garnet/SwitchAllocator.cc b/src/mem/ruby/network/garnet/SwitchAllocator.cc
index e31733d42e..167d58e7a3 100644
--- a/src/mem/ruby/network/garnet/SwitchAllocator.cc
+++ b/src/mem/ruby/network/garnet/SwitchAllocator.cc
@@ -188,19 +188,18 @@ SwitchAllocator::arbitrate_outports()
                 // remove flit from Input VC
                 flit *t_flit = input_unit->getTopFlit(invc);

-                DPRINTF(RubyNetwork, "SwitchAllocator at Router %d "
-                                     "granted outvc %d at outport %d "
-                                     "to invc %d at inport %d to flit %s at "
-                                     "cycle: %lld\n",
+                DPRINTF(RubyNetwork,
+                        "SwitchAllocator at Router %d "
+                        "granted outvc %d at outport %d "
+                        "to invc %d at inport %d to flit %s at "
+                        "cycle: %lld\n",
                         m_router->get_id(), outvc,
                         m_router->getPortDirectionName(
                             output_unit->get_direction()),
                         invc,
                         m_router->getPortDirectionName(
                             input_unit->get_direction()),
-                            *t_flit,
-                        m_router->curCycle());
-
+                        *t_flit, m_router->curCycle());

                 // Update outport field in the flit since this is
                 // used by CrossbarSwitch code to send it out of
@@ -224,14 +223,15 @@ SwitchAllocator::arbitrate_outports()
                 if ((t_flit->get_type() == TAIL_) ||
                     t_flit->get_type() == HEAD_TAIL_) {

-                    // This Input VC should now be empty
-                    assert(!(input_unit->isReady(invc, curTick())));
+                    // This Input VC should not be full now
+                    assert(!(input_unit->isFull(invc)));

                     // Free this VC
                     input_unit->set_vc_idle(invc, curTick());

                     // Send a credit back
-                    // along with the information that this VC is now idle
+                    // along with the information that this VC is not fully
+                    // occupied now
                     input_unit->increment_credit(invc, true, curTick());
                 } else {
                     // Send a credit back
diff --git a/src/mem/ruby/network/garnet/VirtualChannel.cc b/src/mem/ruby/network/garnet/VirtualChannel.cc
index 18e89a09b9..c1ced7af8c 100644
--- a/src/mem/ruby/network/garnet/VirtualChannel.cc
+++ b/src/mem/ruby/network/garnet/VirtualChannel.cc
@@ -40,35 +40,22 @@ namespace ruby
 namespace garnet
 {

-VirtualChannel::VirtualChannel()
-  : inputBuffer(), m_vc_state(IDLE_, Tick(0)), m_output_port(-1),
-    m_enqueue_time(INFINITE_), m_output_vc(-1)
-{
-}
+VirtualChannel::VirtualChannel(int max_buffer_depth)
+    : inputBuffer(max_buffer_depth) {}

-void
-VirtualChannel::set_idle(Tick curTime)
-{
-    m_vc_state.first = IDLE_;
-    m_vc_state.second = curTime;
-    m_enqueue_time = Tick(INFINITE_);
-    m_output_port = -1;
-    m_output_vc = -1;
+void VirtualChannel::dec_vc_flit_num(Tick curTime) {
+    m_vc_state_meta.pop_front();
 }

-void
-VirtualChannel::set_active(Tick curTime)
-{
-    m_vc_state.first = ACTIVE_;
-    m_vc_state.second = curTime;
-    m_enqueue_time = curTime;
+void VirtualChannel::add_vc_flit_num(Tick curTime) {
+    m_vc_state_meta.emplace_back(curTime);
 }

 bool
 VirtualChannel::need_stage(flit_stage stage, Tick time)
 {
     if (inputBuffer.isReady(time)) {
-        assert(m_vc_state.first == ACTIVE_ && m_vc_state.second <= time);
+        assert(get_state_size() > 0 && get_enqueue_time() <= time);
         flit *t_flit = inputBuffer.peekTopFlit();
         return(t_flit->is_stage(stage, time));
     }
diff --git a/src/mem/ruby/network/garnet/VirtualChannel.hh b/src/mem/ruby/network/garnet/VirtualChannel.hh
index 04b046b697..9913e47f4f 100644
--- a/src/mem/ruby/network/garnet/VirtualChannel.hh
+++ b/src/mem/ruby/network/garnet/VirtualChannel.hh
@@ -33,7 +33,8 @@
 #define __MEM_RUBY_NETWORK_GARNET_0_VIRTUALCHANNEL_HH__

 #include <utility>
-
+#include "base/trace.hh"
+#include "debug/Lab3.hh"
 #include "mem/ruby/network/garnet/CommonTypes.hh"
 #include "mem/ruby/network/garnet/flitBuffer.hh"

@@ -49,20 +50,29 @@ namespace garnet
 class VirtualChannel
 {
   public:
-    VirtualChannel();
+    VirtualChannel(int max_buffer_depth = 1);
     ~VirtualChannel() = default;

     bool need_stage(flit_stage stage, Tick time);
-    void set_idle(Tick curTime);
-    void set_active(Tick curTime);
-    void set_outvc(int outvc)               { m_output_vc = outvc; }
-    inline int get_outvc()                  { return m_output_vc; }
-    void set_outport(int outport)           { m_output_port = outport; };
-    inline int get_outport()                  { return m_output_port; }
+    void dec_vc_flit_num(Tick curTime);
+    void add_vc_flit_num(Tick curTime);
+    void set_outvc(int outvc) {
+        m_vc_state_meta.front().m_outvc = outvc;
+    } // front because this is done at arbitrate outport
+    inline int get_outvc() { return m_vc_state_meta.front().m_outvc; }
+    void set_outport(int outport) {
+        m_vc_state_meta.back().m_outport = outport;
+    }; // back because this is done at VC insertion
+    inline int get_outport() { return m_vc_state_meta.front().m_outport; }
+
+    inline Tick get_enqueue_time() {
+        return m_vc_state_meta.front().m_enqueue_time;
+    }

-    inline Tick get_enqueue_time()          { return m_enqueue_time; }
-    inline void set_enqueue_time(Tick time) { m_enqueue_time = time; }
-    inline VC_state_type get_state()        { return m_vc_state.first; }
+    inline VC_flit_num get_state_size() { return m_vc_state_meta.size(); }
+    inline bool isFull() {
+        return inputBuffer.getSize() == inputBuffer.getMaxSize();
+    }

     inline bool
     isReady(Tick curTime)
@@ -76,13 +86,6 @@ class VirtualChannel
         inputBuffer.insert(t_flit);
     }

-    inline void
-    set_state(VC_state_type m_state, Tick curTime)
-    {
-        m_vc_state.first = m_state;
-        m_vc_state.second = curTime;
-    }
-
     inline flit*
     peekTopFlit()
     {
@@ -100,10 +103,15 @@ class VirtualChannel

   private:
     flitBuffer inputBuffer;
-    std::pair<VC_state_type, Tick> m_vc_state;
-    int m_output_port;
-    Tick m_enqueue_time;
-    int m_output_vc;
+    struct VC_state_meta
+    {
+        int m_outport;
+        int m_outvc;
+        Tick m_enqueue_time;
+        VC_state_meta(Tick m_enqueue_time)
+            : m_enqueue_time(m_enqueue_time), m_outport(-1), m_outvc(-1) {}
+    };
+    std::deque<VC_state_meta> m_vc_state_meta;
 };

 } // namespace garnet
diff --git a/src/mem/ruby/network/garnet/flitBuffer.hh b/src/mem/ruby/network/garnet/flitBuffer.hh
index 089c931951..0d1ede8821 100644
--- a/src/mem/ruby/network/garnet/flitBuffer.hh
+++ b/src/mem/ruby/network/garnet/flitBuffer.hh
@@ -58,6 +58,7 @@ class flitBuffer
     void print(std::ostream& out) const;
     bool isFull();
     void setMaxSize(int maximum);
+    int getMaxSize() { return max_size; }
     int getSize() const { return m_buffer.size(); }

     flit *
--
2.25.1
